/*
Copyright 2020 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/rancher/k3p/pkg/apis/helm.k3s.io/v1alpha1"
	clientset "github.com/rancher/k3p/pkg/generated/clientset/versioned/typed/helm.k3s.io/v1alpha1"
	informers "github.com/rancher/k3p/pkg/generated/informers/externalversions/helm.k3s.io/v1alpha1"
	listers "github.com/rancher/k3p/pkg/generated/listers/helm.k3s.io/v1alpha1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ChartHandler func(string, *v1alpha1.Chart) (*v1alpha1.Chart, error)

type ChartController interface {
	generic.ControllerMeta
	ChartClient

	OnChange(ctx context.Context, name string, sync ChartHandler)
	OnRemove(ctx context.Context, name string, sync ChartHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() ChartCache
}

type ChartClient interface {
	Create(*v1alpha1.Chart) (*v1alpha1.Chart, error)
	Update(*v1alpha1.Chart) (*v1alpha1.Chart, error)
	UpdateStatus(*v1alpha1.Chart) (*v1alpha1.Chart, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.Chart, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.ChartList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Chart, err error)
}

type ChartCache interface {
	Get(namespace, name string) (*v1alpha1.Chart, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha1.Chart, error)

	AddIndexer(indexName string, indexer ChartIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.Chart, error)
}

type ChartIndexer func(obj *v1alpha1.Chart) ([]string, error)

type chartController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.ChartsGetter
	informer          informers.ChartInformer
	gvk               schema.GroupVersionKind
}

func NewChartController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.ChartsGetter, informer informers.ChartInformer) ChartController {
	return &chartController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromChartHandlerToHandler(sync ChartHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.Chart
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.Chart))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *chartController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.Chart))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateChartDeepCopyOnChange(client ChartClient, obj *v1alpha1.Chart, handler func(obj *v1alpha1.Chart) (*v1alpha1.Chart, error)) (*v1alpha1.Chart, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *chartController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *chartController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *chartController) OnChange(ctx context.Context, name string, sync ChartHandler) {
	c.AddGenericHandler(ctx, name, FromChartHandlerToHandler(sync))
}

func (c *chartController) OnRemove(ctx context.Context, name string, sync ChartHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromChartHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *chartController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *chartController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *chartController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *chartController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *chartController) Cache() ChartCache {
	return &chartCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *chartController) Create(obj *v1alpha1.Chart) (*v1alpha1.Chart, error) {
	return c.clientGetter.Charts(obj.Namespace).Create(obj)
}

func (c *chartController) Update(obj *v1alpha1.Chart) (*v1alpha1.Chart, error) {
	return c.clientGetter.Charts(obj.Namespace).Update(obj)
}

func (c *chartController) UpdateStatus(obj *v1alpha1.Chart) (*v1alpha1.Chart, error) {
	return c.clientGetter.Charts(obj.Namespace).UpdateStatus(obj)
}

func (c *chartController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.Charts(namespace).Delete(name, options)
}

func (c *chartController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.Chart, error) {
	return c.clientGetter.Charts(namespace).Get(name, options)
}

func (c *chartController) List(namespace string, opts metav1.ListOptions) (*v1alpha1.ChartList, error) {
	return c.clientGetter.Charts(namespace).List(opts)
}

func (c *chartController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.Charts(namespace).Watch(opts)
}

func (c *chartController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Chart, err error) {
	return c.clientGetter.Charts(namespace).Patch(name, pt, data, subresources...)
}

type chartCache struct {
	lister  listers.ChartLister
	indexer cache.Indexer
}

func (c *chartCache) Get(namespace, name string) (*v1alpha1.Chart, error) {
	return c.lister.Charts(namespace).Get(name)
}

func (c *chartCache) List(namespace string, selector labels.Selector) ([]*v1alpha1.Chart, error) {
	return c.lister.Charts(namespace).List(selector)
}

func (c *chartCache) AddIndexer(indexName string, indexer ChartIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.Chart))
		},
	}))
}

func (c *chartCache) GetByIndex(indexName, key string) (result []*v1alpha1.Chart, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.Chart, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.Chart))
	}
	return result, nil
}

type ChartStatusHandler func(obj *v1alpha1.Chart, status v1alpha1.ChartStatus) (v1alpha1.ChartStatus, error)

type ChartGeneratingHandler func(obj *v1alpha1.Chart, status v1alpha1.ChartStatus) ([]runtime.Object, v1alpha1.ChartStatus, error)

func RegisterChartStatusHandler(ctx context.Context, controller ChartController, condition condition.Cond, name string, handler ChartStatusHandler) {
	statusHandler := &chartStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromChartHandlerToHandler(statusHandler.sync))
}

func RegisterChartGeneratingHandler(ctx context.Context, controller ChartController, apply apply.Apply,
	condition condition.Cond, name string, handler ChartGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &chartGeneratingHandler{
		ChartGeneratingHandler: handler,
		apply:                  apply,
		name:                   name,
		gvk:                    controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterChartStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type chartStatusHandler struct {
	client    ChartClient
	condition condition.Cond
	handler   ChartStatusHandler
}

func (a *chartStatusHandler) sync(key string, obj *v1alpha1.Chart) (*v1alpha1.Chart, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type chartGeneratingHandler struct {
	ChartGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *chartGeneratingHandler) Handle(obj *v1alpha1.Chart, status v1alpha1.ChartStatus) (v1alpha1.ChartStatus, error) {
	objs, newStatus, err := a.ChartGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
